import asyncio
import json

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import F
from aiogram.types.web_app_info import WebAppInfo
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode

from functions import *
from config import TOKEN

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.WARNING)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

dp.include_router(router)
user_sections = {}

markup = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", web_app=WebAppInfo(
    url="https://my-idea1.ru/"))]], resize_keyboard=True)

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"), KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")],
        [KeyboardButton(text="–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"), KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")]
    ],
    resize_keyboard=True
)

sections_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"), KeyboardButton(text="–ê–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")],
        [KeyboardButton(text="–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"), KeyboardButton(text="–°—Ä–µ–¥—Å—Ç–≤–æ –ª–∏—á–Ω–æ–π –∑–∞—â–∏—Ç—ã")],
        [KeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–¥–µ–ª–∫–∏")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")],

    ],
    resize_keyboard=True
)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    user_name = message.from_user.first_name
    chat_id = message.chat.id
    pool = await connect_to_db()

    async with pool.acquire() as connection:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await connection.fetchrow(
            "SELECT * FROM id_users WHERE chat_id = $1",
            chat_id
        )

        if user and chat_id:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            reply = await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n–í—ã–±–µ—Ä–µ—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=main_menu)
            await handle_user_message(message)
            await handle_bot_message(message,reply)
        else:
            reply = await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–∫–ª–∞–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å!",
                                 reply_markup=markup)
            await handle_user_message(message)
            await handle_bot_message(message, reply)


@router.message(F.content_type == 'web_app_data')
async def web_app(message: types.Message):
    chat_id = message.chat.id
    # –†–∞–∑–±–æ—Ä JSON-–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    res = json.loads(message.web_app_data.data)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await connect_to_db()
    if res['builder'] and res['name'] and res['surname']:
        async with pool.acquire() as connection:
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É
            async with connection.transaction():
                # Insert data into the id_users table
                await connection.execute(
                    "INSERT INTO id_users (chat_id, builder_number, –ò–º—è, –§–∞–º–∏–ª–∏—è) VALUES ($1, $2, $3, $4)",
                    chat_id, res['builder'], res['name'], res['surname']
                )
                reply = await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª",
                                     reply_markup=main_menu)
                await handle_bot_message(message,reply)
    else:
        reply = await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                             reply_markup=markup, show_alert=True)
        await handle_bot_message(message, reply)

    # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await pool.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@router.message(F.text == "–í–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
async def handle_take_tools(message: Message):
    logging.info("Handling '–í–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'")
    reply = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=sections_menu)
    await handle_user_message(message)
    await handle_bot_message(message, reply)

"fatal: Updating an unborn branch with changes added to the index."
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@router.message(F.text == "–í–µ—Ä–Ω—É—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
async def handle_take_tools(message: Message):
    await send_user_tools(message)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
async def table_tool(message: Message):
    user_sections[message.chat.id] = "tools"
    reply = await message.answer("üî®", reply_markup=sections_menu)
    await display_tools(message, 1, 21)
    await handle_bot_message(message, reply)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
@router.message(F.text == "–ê–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
async def tool_accessory(message: Message):
    user_sections[message.chat.id] = "accessories"
    reply = await message.answer("Ô∏èüõ†Ô∏è", reply_markup=sections_menu)
    await display_tools(message, 26, 103)
    await handle_bot_message(message, reply)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"
@router.message(F.text == "–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
async def tool_accessory(message: Message):
    user_sections[message.chat.id] = "hand_tools"
    reply = await message.answer("ü™õ", reply_markup=sections_menu)
    await display_tools(message, 107, 140)
    await handle_bot_message(message, reply)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ä–µ–¥—Å—Ç–≤–æ –ª–∏—á–Ω–æ–π –∑–∞—â–∏—Ç—ã"
@router.message(F.text == "–°—Ä–µ–¥—Å—Ç–≤–æ –ª–∏—á–Ω–æ–π –∑–∞—â–∏—Ç—ã")
async def tool_accessory(message: Message):
    user_sections[message.chat.id] = "personal_protection"
    reply = await message.answer("‚õëÔ∏è", reply_markup=sections_menu)
    await display_tools(message, 142, 153)
    await handle_bot_message(message, reply)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–¥–µ–ª–∫–∏"
@router.message(F.text == "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–¥–µ–ª–∫–∏")
async def tool_accessory(message: Message):
    user_sections[message.chat.id] = "interior_tools"
    reply = await message.answer("üî®", reply_markup=sections_menu)
    await display_tools(message, 155, 182)
    await handle_bot_message(message, reply)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(F.text == "–ù–∞–∑–∞–¥")
async def handle_back(message: Message):
    reply = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=main_menu)
    await handle_user_message(message)
    await handle_bot_message(message, reply)


@router.callback_query(F.data == "back_to_tools")
async def handle_back_to_tools(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    current_section = user_sections.get(chat_id, "tools")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if current_section == "tools":
        await display_tools(callback_query.message, 1, 21)
    elif current_section == "accessories":
        await display_tools(callback_query.message, 26, 103)
    elif current_section == "hand_tools":
        await display_tools(callback_query.message, 107, 140)
    elif current_section == "personal_protection":
        await display_tools(callback_query.message, 142, 153)
    elif current_section == "interior_tools":
        await display_tools(callback_query.message, 155, 182)
    else:
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=main_menu)

    await callback_query.answer()


@router.callback_query(F.data == "back_to_tools2")
async def handle_back_to_tools(callback_query: types.CallbackQuery):
    await send_user_tools(callback_query.message)


async def display_tools(message: Message, start: int, end: int):
    logging.info("Fetching tools from database")
    text = message.text

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    tools = await fetch_tools(start, end)

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    keyboard_buttons = [
        [InlineKeyboardButton(text=tool['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'], callback_data=f"tool:{tool['id']}:{tool['–û—Å—Ç–∞–ª–æ—Å—å']}")
         for tool in tools[i:i + 2]]
        for i in range(0, len(tools), 2)
    ]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    keyboard1 = message.reply_markup
    if keyboard1 and isinstance(keyboard1, InlineKeyboardMarkup):
        # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å callback_data
        for row in keyboard1.inline_keyboard:
            for button in row:
                if button.callback_data == 'back_to_tools':
                    await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", reply_markup=keyboard)

    elif text == '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' or '–ê–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤' or '–†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç' or '–°—Ä–µ–¥—Å—Ç–≤–æ –ª–∏—á–Ω–æ–π –∑–∞—â–∏—Ç—ã' or '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—Ç–¥–µ–ª–∫–∏':
        reply = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", reply_markup=keyboard)
        await handle_user_message(message)
        await handle_bot_message(message, reply)
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (callback handler)
@router.callback_query(F.data.startswith('tool:'))
async def process_tool_choice(callback_query: types.CallbackQuery):
    logging.info(f"Callback query received: {callback_query.data}")
    # –†–∞–∑–¥–µ–ª—è–µ–º callback_data –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    try:
        # Split the callback data by colon and extract tool_id and tool_quantity
        _, tool_id, tools_quantity = callback_query.data.split(":")
        tool_id = int(tool_id)
        tools_quantity = int(tools_quantity)
        # –ü–æ–∫–∞–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –∫–Ω–æ–ø–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è
        await show_quantity_selection(callback_query.message, tool_id, tools_quantity)
    except Exception as e:
        logging.error(f"Error processing callback query: {e}")


async def show_quantity_selection(message: Message, tool_id: int, tools_quantity: int, current_quantity: int = 1):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease:{tool_id}:{tools_quantity}:{current_quantity}"),
            InlineKeyboardButton(text=str(current_quantity), callback_data="ignore"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase:{tool_id}:{tools_quantity}:{current_quantity}")
        ],
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{tool_id}:{current_quantity}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_to_tools")],

    ])
    tools = await fetch_tools_quantity()
    for tool in tools:
        if tool['tool_id'] == tool_id:
            await message.edit_text(
                f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool['tool_name'].upper()}\n–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–∫–ª–∞–¥–µ: {tool['quantity']}"
                f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
                reply_markup=keyboard, parse_mode=ParseMode.HTML)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
@router.callback_query(lambda c: c.data and (c.data.startswith('increase:') or c.data.startswith('decrease:')))
async def change_quantity(callback_query: types.CallbackQuery):
    _, tool_id, tools_quantity,  current_quantity = callback_query.data.split(':')
    current_quantity = int(current_quantity)
    tools_quantity = int(tools_quantity)

    if 'increase' in callback_query.data and current_quantity < tools_quantity:
        current_quantity += 1
        await show_quantity_selection(callback_query.message, int(tool_id), tools_quantity, current_quantity)
    elif 'decrease' in callback_query.data and current_quantity > 1:
        current_quantity -= 1
        await show_quantity_selection(callback_query.message, int(tool_id), tools_quantity, current_quantity)

    else:
        if current_quantity < tools_quantity:
            await callback_query.answer(f"–û–®–ò–ë–ö–ê: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å 0 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                                        show_alert=True)
        elif current_quantity >= 1:
            await callback_query.answer(
                f"–û–®–ò–ë–ö–ê: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –∏–º–µ–µ—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ",
                show_alert=True)


@router.callback_query(F.data.startswith('confirm:'))
async def confirm_choice(callback_query: types.CallbackQuery):
    _, tool_id, quantity = callback_query.data.split(':')
    tool_id = int(tool_id)
    quantity = int(quantity)
    chat_id = callback_query.message.chat.id

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    pool = await connect_to_db()
    async with pool.acquire() as connection:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        tool = await connection.fetchrow(
            "SELECT –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –û—Å—Ç–∞–ª–æ—Å—å FROM tools WHERE id = $1", tool_id
        )
        if tool:
            tool_name = tool['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã']
            remaining_quantity = int(tool['–û—Å—Ç–∞–ª–æ—Å—å'])

            if remaining_quantity >= quantity:
                # Fetch all rows where chat_id matches the user's chat_id
                users = await connection.fetch(
                    "SELECT –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM user_tool WHERE chat_id = $1",
                    chat_id
                )

                # Flag to check if tool is found for this user
                tool_found = False

                for user in users:
                    if user['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'] == tool_name:
                        new_quantity1 = quantity + int(user['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                        await connection.execute(
                            "UPDATE user_tool SET –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = $1 WHERE chat_id = $2 AND –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã = $3",
                            str(new_quantity1), chat_id, tool_name
                        )
                        new_quantity = remaining_quantity - quantity
                        await connection.execute(
                            "UPDATE tools SET –û—Å—Ç–∞–ª–æ—Å—å = $1 WHERE id = $2",
                            str(new_quantity), tool_id
                        )
                        tool_found = True
                        break  # No need to continue loop if tool is found

                if not tool_found:
                    # If tool is not found for the user, insert a new record
                    await connection.execute(
                        "INSERT INTO user_tool (–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, chat_id) VALUES ($1, $2, $3)",
                        tool_name, str(quantity), chat_id
                    )
                    new_quantity = remaining_quantity - quantity
                    await connection.execute(
                        "UPDATE tools SET –û—Å—Ç–∞–ª–æ—Å—å = $1 WHERE id = $2",
                        str(new_quantity), tool_id
                    )

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {tool_name} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity}.")

                current_section = user_sections.get(chat_id, "tools")

                # –í—ã–≤–æ–¥ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                if current_section == "tools":
                    await display_tools(callback_query.message, 1, 21)
                elif current_section == "accessories":
                    await display_tools(callback_query.message, 26, 103)
                elif current_section == "hand_tools":
                    await display_tools(callback_query.message, 107, 140)
                elif current_section == "personal_protection":
                    await display_tools(callback_query.message, 142, 153)
                elif current_section == "interior_tools":
                    await display_tools(callback_query.message, 155, 182)
            else:
                await callback_query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.",
                                            show_alert=True)
        else:
            await callback_query.answer("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    await pool.close()















async def send_user_tools(message: types.Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–∫–∞ –µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–∏–¥–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫."""
    user_id = message.chat.id  # –ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # print('---------send_user_tools---------')
    # print('user_id-------->',user_id)
    # print('message-------->',message)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user_tool = await fetch_user_tools(user_id)

    # print('tools-------->',tools)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_tool:
        reply = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
        await handle_user_message(message)
        await handle_bot_message(message, reply)
        return

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    keyboard_buttons = []
    for tool in user_tool:
        # print('tool---------', tool)
        print('tool[uuid]------------------------------------------------------------------------------------',tool['uuid'])
        if user_id == tool['chat_id']:
            keyboard_buttons.append(
                [InlineKeyboardButton(text=tool['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã'],
                                      callback_data=f"ret_tool:{tool['uuid']}")])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –ø—É—Å—Ç
    if not keyboard_buttons:
        reply = await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")
        await handle_user_message(message)
        await handle_bot_message(message, reply)
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    keyboard1 = message.reply_markup
    if keyboard1 and isinstance(keyboard1, InlineKeyboardMarkup):
        # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ —Å callback_data
        for row in keyboard1.inline_keyboard:
            for button in row:
                if button.callback_data == 'back_to_tools2':
                    await message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", reply_markup=keyboard)
    elif user_id:
        reply = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", reply_markup=keyboard)
        await handle_user_message(message)
        await handle_bot_message(message, reply)
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å
@router.callback_query(F.data.startswith('ret_tool:'))
async def process_tool_return(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º callback_data
    callback_data = callback_query.data
    print('callback_data--------->', callback_data)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º uuid –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ callback_data
    tool_uuid = callback_data.split(':')[1]
    print('tool_uuid--------->', tool_uuid)

    # –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tool_uuid –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ uuid.
    user_tool = await fetch_tool_by_uuid(tool_uuid)
    print(user_tool)

    if user_tool:
        tool_name = user_tool['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã']
        tool_quantity = user_tool['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']

        print("---------process_tool_return---------")
        print("tool_name---------", tool_name)
        await show_return_quantity_selection(callback_query.message, tool_uuid, tool_quantity)

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    await callback_query.answer()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∏ –∫–Ω–æ–ø–æ–∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
async def show_return_quantity_selection(message: types.Message, tool_uuid: str, tool_quantity, current_quantity: int = 1):
    # print("---------show_return_quantity_selection---------")
    # print("tool_name---------", tool_name)
    # print("tool_quantity---------", tool_quantity)
    # print("current_quantity---------\n", current_quantity)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_return:{tool_uuid}:{current_quantity}"),
            InlineKeyboardButton(text=f"{current_quantity}", callback_data="ignore"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_return:{tool_uuid}:{current_quantity}")
        ],
        [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"confirm_return:{tool_uuid}:{current_quantity}")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_to_tools2")],

    ])
    await message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ {tool_quantity}:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è/—É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
@router.callback_query(
    lambda c: c.data and (c.data.startswith('increase_return:') or c.data.startswith('decrease_return:')))
async def change_return_quantity(callback_query: types.CallbackQuery):
    print(callback_query.data.split(':'))
    _, tool_uuid, current_quantity = callback_query.data.split(':')

    user_tool = await fetch_tool_by_uuid(tool_uuid)

    tool_name = user_tool['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã']
    tool_quantity = int(user_tool['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
    current_quantity = int(current_quantity)

    print("---------change_return_quantity---------")
    print("tool_name---------", tool_name)
    print("tool_quantity---------", tool_quantity)
    print("current_quantity---------", current_quantity)

    # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if 'increase_return' in callback_query.data and current_quantity < tool_quantity:
        current_quantity += 1
        await show_return_quantity_selection(callback_query.message, tool_uuid, tool_quantity,current_quantity)
    elif 'decrease_return' in callback_query.data and current_quantity > 1:
        current_quantity -= 1
        await show_return_quantity_selection(callback_query.message, tool_uuid, tool_quantity,current_quantity)
    else:
        if current_quantity < tool_quantity:
            await callback_query.answer(f"–û–®–ò–ë–ö–ê: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å 0 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                                        show_alert=True)
        elif current_quantity >= 1:
            await callback_query.answer(
                f"–û–®–ò–ë–ö–ê: –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –∏–º–µ–µ—Ç—Å—è —É –≤–∞—Å",
                show_alert=True)
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞
@router.callback_query(F.data.startswith('confirm_return:'))
async def confirm_tool_return(callback_query: types.CallbackQuery):
    _, tool_uuid, quantity = callback_query.data.split(':')
    quantity = int(quantity)
    chat_id = callback_query.message.chat.id
    user_tool = await fetch_tool_by_uuid(tool_uuid)

    if user_tool:
        tool_name = user_tool['–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã']
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        pool = await connect_to_db()
        async with pool.acquire() as connection:
            # Check if the tool exists in the database
            tool = await connection.fetchrow(
                "SELECT –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –û—Å—Ç–∞–ª–æ—Å—å FROM tools WHERE –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã = $1", tool_name
            )

            if tool:
                user_tool = await connection.fetchrow(
                    "SELECT uuid, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FROM user_tool WHERE chat_id = $1 AND –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã = $2",
                    chat_id, tool_name
                )
                # print('tool',tool)

                if user_tool:
                    user_tool_quantity = int(user_tool['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
                    remaining_quantity = int(tool['–û—Å—Ç–∞–ª–æ—Å—å'])
                    # print('user_tool', user_tool)
                    # Update tool quantity in the main table
                    new_quantity = remaining_quantity + quantity
                    await connection.execute(
                        "UPDATE tools SET –û—Å—Ç–∞–ª–æ—Å—å = $1 WHERE –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã = $2",
                        str(new_quantity), tool_name
                    )

                    if quantity >= user_tool_quantity:
                        # Remove the tool from user records if all are returned
                        await connection.execute(
                            "DELETE FROM user_tool WHERE uuid = $1",
                            user_tool['uuid']
                        )
                    else:
                        # Update the user's tool quantity if only part is returned
                        new_user_quantity = user_tool_quantity - quantity
                        await connection.execute(
                            "UPDATE user_tool SET –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ = $1 WHERE uuid = $2",
                            str(new_user_quantity), user_tool['uuid']
                        )

                    # Confirm to the user
                    await callback_query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏ {quantity} {tool_name} –Ω–∞ —Å–∫–ª–∞–¥.")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    tools = await fetch_user_tools(chat_id)

                    if tools:
                        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –æ—Å—Ç–∞–ª–∏—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
                        await send_user_tools(callback_query.message)
                    else:
                        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                        await callback_query.message.delete()
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É –Ω–µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                        reply = await callback_query.message.answer("–í—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=main_menu)
                        await handle_bot_message(callback_query.message, reply)
                else:
                    await callback_query.answer("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.", show_alert=True)
            else:
                await callback_query.answer("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

        await pool.close()


async def main():


    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

